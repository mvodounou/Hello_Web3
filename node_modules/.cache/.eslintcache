[{"/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/index.js":"1","/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/App.js":"2","/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/reportWebVitals.js":"3","/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/HelloWorld.js":"4","/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/util/interact.js":"5"},{"size":500,"mtime":1620933938000,"results":"6","hashOfConfig":"7"},{"size":182,"mtime":1620933938000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1620933938000,"results":"9","hashOfConfig":"7"},{"size":3243,"mtime":1675540140017,"results":"10","hashOfConfig":"7"},{"size":4389,"mtime":1675540100409,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"16o8gi3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/index.js",[],["25","26"],"/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/App.js",[],"/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/reportWebVitals.js",[],"/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/HelloWorld.js",["27","28","29"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    const message = await loadCurrentMessage()\n\t  setMessage(message)\n    addSmartContractListener()\n\n    const { address, status } = await getCurrentWalletConnected()\n\t  setWallet(address)\n\t  setStatus(status)\n\n    addWalletListener()\n  }, []);\n\n  function addSmartContractListener() { //TODO: implement\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n        if (error) {\n      \tsetStatus(\"😥 \" + error.message)\n      \t} else {\n      \tsetMessage(data.returnValues[1])\n      \tsetNewMessage(\"\")\n      \tsetStatus(\"🎉 Your message has been updated!\")\n      \t} })\n  }\n\n  function addWalletListener() {\n    \t  if (window.ethereum) {\n    \t    window.ethereum.on(\"accountsChanged\", (accounts) => {\n    \t      if (accounts.length > 0) {\n    \t        setWallet(accounts[0])\n    \t        setStatus(\"👆🏽 Write a message in the text-field above.\")\n    \t      } else {\n    \t        setWallet(\"\")\n    \t        setStatus(\"🦊 Connect to MetaMask using the top right button.\")\n    \t      }\n    \t    })\n    \t  } else {\n    \t    setStatus(\n    \t      <p>\n    \t        {\" \"}\n    \t        🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n    \t          You must install MetaMask, a virtual Ethereum wallet, in your browser.\n    \t        </a>\n    \t      </p>\n    \t    )\n    \t  }\n  }\t\n\n  const connectWalletPressed = async () => { //TODO: implement\n    const walletResponse = await connectWallet()\n    setStatus(walletResponse.status)\n    setWallet(walletResponse.address)\n  };\n\n  const onUpdatePressed = async () => { //TODO: implement\n    const { status } = await updateMessage(walletAddress, newMessage)\n\t  setStatus(status)\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <img id=\"logo\" src={alchemylogo}></img>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HelloWorld;\n","/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/util/interact.js",["30","31","32"],"require(\"dotenv\").config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(alchemyKey)\n\nconst contractABI = require(\"../contract-abi.json\")\nconst contractAddress = \"0x9D2Cfb7002602A4FfaDca790b335c10f3622d53d\"\n\nexport const helloWorldContract = new web3.eth.Contract(\n    \tcontractABI,\n    \tcontractAddress)\n\nexport const loadCurrentMessage = async () => { \n    const message = await helloWorldContract.methods.message().call()\n    return message\n};\n\nexport const connectWallet = async () => {\n    \t  if (window.ethereum) {\n    \t    try {\n    \t      const addressArray = await window.ethereum.request({\n    \t        method: \"eth_requestAccounts\",\n    \t      })\n    \t      const obj = {\n    \t        status: \"👆🏽 Write a message in the text-field above.\",\n    \t        address: addressArray[0],\n    \t      }\n    \t      return obj\n    \t    } catch (err) {\n    \t      return {\n    \t        address: \"\",\n    \t        status: \"😥 \" + err.message,\n    \t      }\n    \t    }\n    \t  } else {\n    \t    return {\n    \t      address: \"\",\n    \t      status: (\n    \t        <span>\n    \t          <p>\n    \t            {\" \"}\n    \t            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n    \t              You must install MetaMask, a virtual Ethereum wallet, in your\n    \t              browser.\n    \t            </a>\n    \t          </p>\n    \t        </span>\n    \t      ),\n    \t    }\n    \t  }\n}\t\n\nexport const getCurrentWalletConnected = async () => {\n    \t  if (window.ethereum) {\n    \t    try {\n    \t      const addressArray = await window.ethereum.request({\n    \t        method: \"eth_accounts\",\n    \t      })\n    \t      if (addressArray.length > 0) {\n    \t        return {\n    \t          address: addressArray[0],\n    \t          status: \"👆🏽 Write a message in the text-field above.\",\n    \t        }\n    \t      } else {\n    \t        return {\n    \t          address: \"\",\n    \t          status: \"🦊 Connect to MetaMask using the top right button.\",\n    \t        }\n    \t      }\n    \t    } catch (err) {\n    \t      return {\n    \t        address: \"\",\n    \t        status: \"😥 \" + err.message,\n    \t      }\n    \t    }\n    \t  } else {\n    \t    return {\n    \t      address: \"\",\n    \t      status: (\n    \t        <span>\n    \t          <p>\n    \t            {\" \"}\n    \t            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n    \t              You must install MetaMask, a virtual Ethereum wallet, in your\n    \t              browser.\n    \t            </a>\n    \t          </p>\n    \t        </span>\n    \t      ),\n    \t    }\n    \t  }\n}\n\nexport const updateMessage = async (address, message) => {\n        //input error handling\n        if (!window.ethereum || address === null) {\n        return {\n            status:\n            \"💡 Connect your MetaMask wallet to update the message on the blockchain.\",\n            }\n        }\n            \t\n        if (message.trim() === \"\") {\n            return {\n            \tstatus: \"❌ Your message cannot be an empty string.\",\n            \t}\n        }\n            \t\n        //set up transaction parameters\n            const transactionParameters = {\n            to: contractAddress, // Required except during contract publications.\n            from: address, // must match user's active address.\n            data: helloWorldContract.methods.update(message).encodeABI(),\n            }\n            \t\n            //sign the transaction\n            try {\n             const txHash = await window.ethereum.request({\n            \tmethod: \"eth_sendTransaction\",\n            \tparams: [transactionParameters],\n            \t})\n            \treturn {\n            \t status: (\n            \t    <span>\n            \t      ✅{\" \"}\n            \t          <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\n            \t            View the status of your transaction on Etherscan!\n            \t          </a>\n            \t          <br />\n            \t          ℹ️ Once the transaction is verified by the network, the message will\n            \t          be updated automatically.\n            \t        </span>\n            \t      ),\n            \t    }\n            \t  } catch (error) {\n            \t    return {\n            \t      status: \"😥 \" + error.message,\n            \t    }\n            \t  }\n}\n            ",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":21,"column":13,"nodeType":"39","endLine":31,"endColumn":4},{"ruleId":"40","severity":1,"message":"41","line":59,"column":17,"nodeType":"42","endLine":59,"endColumn":79},{"ruleId":"43","severity":1,"message":"44","line":81,"column":7,"nodeType":"42","endLine":81,"endColumn":40},{"ruleId":"40","severity":1,"message":"41","line":42,"column":21,"nodeType":"42","endLine":42,"endColumn":83},{"ruleId":"40","severity":1,"message":"41","line":83,"column":21,"nodeType":"42","endLine":83,"endColumn":83},{"ruleId":"40","severity":1,"message":"41","line":126,"column":24,"nodeType":"42","endLine":126,"endColumn":93},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]