{"ast":null,"code":"var _jsxFileName = \"/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/util/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"dotenv\").config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\n\nconst contractAddress = \"0x9D2Cfb7002602A4FfaDca790b335c10f3622d53d\";\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install MetaMask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to MetaMask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install MetaMask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 14\n      }, this)\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your MetaMask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://goerli.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 24\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 18\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};","map":{"version":3,"sources":["/Users/mosesvodounou/Projects/BlockChain/Hello_World_Web3/src/util/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","message","methods","call","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","txHash","params","error"],"mappings":"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","sourcesContent":["require(\"dotenv\").config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(alchemyKey)\n\nconst contractABI = require(\"../contract-abi.json\")\nconst contractAddress = \"0x9D2Cfb7002602A4FfaDca790b335c10f3622d53d\"\n\nexport const helloWorldContract = new web3.eth.Contract(\n    \tcontractABI,\n    \tcontractAddress)\n\nexport const loadCurrentMessage = async () => { \n    const message = await helloWorldContract.methods.message().call()\n    return message\n};\n\nexport const connectWallet = async () => {\n    \t  if (window.ethereum) {\n    \t    try {\n    \t      const addressArray = await window.ethereum.request({\n    \t        method: \"eth_requestAccounts\",\n    \t      })\n    \t      const obj = {\n    \t        status: \"👆🏽 Write a message in the text-field above.\",\n    \t        address: addressArray[0],\n    \t      }\n    \t      return obj\n    \t    } catch (err) {\n    \t      return {\n    \t        address: \"\",\n    \t        status: \"😥 \" + err.message,\n    \t      }\n    \t    }\n    \t  } else {\n    \t    return {\n    \t      address: \"\",\n    \t      status: (\n    \t        <span>\n    \t          <p>\n    \t            {\" \"}\n    \t            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n    \t              You must install MetaMask, a virtual Ethereum wallet, in your\n    \t              browser.\n    \t            </a>\n    \t          </p>\n    \t        </span>\n    \t      ),\n    \t    }\n    \t  }\n}\t\n\nexport const getCurrentWalletConnected = async () => {\n    \t  if (window.ethereum) {\n    \t    try {\n    \t      const addressArray = await window.ethereum.request({\n    \t        method: \"eth_accounts\",\n    \t      })\n    \t      if (addressArray.length > 0) {\n    \t        return {\n    \t          address: addressArray[0],\n    \t          status: \"👆🏽 Write a message in the text-field above.\",\n    \t        }\n    \t      } else {\n    \t        return {\n    \t          address: \"\",\n    \t          status: \"🦊 Connect to MetaMask using the top right button.\",\n    \t        }\n    \t      }\n    \t    } catch (err) {\n    \t      return {\n    \t        address: \"\",\n    \t        status: \"😥 \" + err.message,\n    \t      }\n    \t    }\n    \t  } else {\n    \t    return {\n    \t      address: \"\",\n    \t      status: (\n    \t        <span>\n    \t          <p>\n    \t            {\" \"}\n    \t            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n    \t              You must install MetaMask, a virtual Ethereum wallet, in your\n    \t              browser.\n    \t            </a>\n    \t          </p>\n    \t        </span>\n    \t      ),\n    \t    }\n    \t  }\n    \t}\n\nexport const updateMessage = async (address, message) => {\n        //input error handling\n        if (!window.ethereum || address === null) {\n        return {\n            status:\n            \"💡 Connect your MetaMask wallet to update the message on the blockchain.\",\n            }\n        }\n            \t\n        if (message.trim() === \"\") {\n            return {\n            \tstatus: \"❌ Your message cannot be an empty string.\",\n            \t}\n        }\n            \t\n        //set up transaction parameters\n            const transactionParameters = {\n            to: contractAddress, // Required except during contract publications.\n            from: address, // must match user's active address.\n            data: helloWorldContract.methods.update(message).encodeABI(),\n            }\n            \t\n            //sign the transaction\n            try {\n             const txHash = await window.ethereum.request({\n            \tmethod: \"eth_sendTransaction\",\n            \tparams: [transactionParameters],\n            \t})\n            \treturn {\n            \t status: (\n            \t    <span>\n            \t      ✅{\" \"}\n            \t          <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\n            \t            View the status of your transaction on Etherscan!\n            \t          </a>\n            \t          <br />\n            \t          ℹ️ Once the transaction is verified by the network, the message will\n            \t          be updated automatically.\n            \t        </span>\n            \t      ),\n            \t    }\n            \t  } catch (error) {\n            \t    return {\n            \t      status: \"😥 \" + error.message,\n            \t    }\n            \t  }\n}\n            "]},"metadata":{},"sourceType":"module"}